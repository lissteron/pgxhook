// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	context "context"

	pgxhook "github.com/lissteron/pgxhook"
	mock "github.com/stretchr/testify/mock"
)

// MockBeforeHook is an autogenerated mock type for the BeforeHook type
type MockBeforeHook struct {
	mock.Mock
}

type MockBeforeHook_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBeforeHook) EXPECT() *MockBeforeHook_Expecter {
	return &MockBeforeHook_Expecter{mock: &_m.Mock}
}

// Before provides a mock function with given fields: ctx, input
func (_m *MockBeforeHook) Before(ctx context.Context, input *pgxhook.HookData) (context.Context, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for Before")
	}

	var r0 context.Context
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pgxhook.HookData) (context.Context, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pgxhook.HookData) context.Context); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pgxhook.HookData) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBeforeHook_Before_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Before'
type MockBeforeHook_Before_Call struct {
	*mock.Call
}

// Before is a helper method to define mock.On call
//   - ctx context.Context
//   - input *pgxhook.HookData
func (_e *MockBeforeHook_Expecter) Before(ctx interface{}, input interface{}) *MockBeforeHook_Before_Call {
	return &MockBeforeHook_Before_Call{Call: _e.mock.On("Before", ctx, input)}
}

func (_c *MockBeforeHook_Before_Call) Run(run func(ctx context.Context, input *pgxhook.HookData)) *MockBeforeHook_Before_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*pgxhook.HookData))
	})
	return _c
}

func (_c *MockBeforeHook_Before_Call) Return(_a0 context.Context, _a1 error) *MockBeforeHook_Before_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBeforeHook_Before_Call) RunAndReturn(run func(context.Context, *pgxhook.HookData) (context.Context, error)) *MockBeforeHook_Before_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBeforeHook creates a new instance of MockBeforeHook. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBeforeHook(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBeforeHook {
	mock := &MockBeforeHook{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
