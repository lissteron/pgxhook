// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	context "context"

	pgconn "github.com/jackc/pgx/v5/pgconn"
	mock "github.com/stretchr/testify/mock"

	pgx "github.com/jackc/pgx/v5"
)

// MockInputConn is an autogenerated mock type for the InputConn type
type MockInputConn struct {
	mock.Mock
}

type MockInputConn_Expecter struct {
	mock *mock.Mock
}

func (_m *MockInputConn) EXPECT() *MockInputConn_Expecter {
	return &MockInputConn_Expecter{mock: &_m.Mock}
}

// Begin provides a mock function with given fields: ctx
func (_m *MockInputConn) Begin(ctx context.Context) (pgx.Tx, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Begin")
	}

	var r0 pgx.Tx
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (pgx.Tx, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) pgx.Tx); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pgx.Tx)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInputConn_Begin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Begin'
type MockInputConn_Begin_Call struct {
	*mock.Call
}

// Begin is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockInputConn_Expecter) Begin(ctx interface{}) *MockInputConn_Begin_Call {
	return &MockInputConn_Begin_Call{Call: _e.mock.On("Begin", ctx)}
}

func (_c *MockInputConn_Begin_Call) Run(run func(ctx context.Context)) *MockInputConn_Begin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockInputConn_Begin_Call) Return(_a0 pgx.Tx, _a1 error) *MockInputConn_Begin_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInputConn_Begin_Call) RunAndReturn(run func(context.Context) (pgx.Tx, error)) *MockInputConn_Begin_Call {
	_c.Call.Return(run)
	return _c
}

// BeginTx provides a mock function with given fields: ctx, txOptions
func (_m *MockInputConn) BeginTx(ctx context.Context, txOptions pgx.TxOptions) (pgx.Tx, error) {
	ret := _m.Called(ctx, txOptions)

	if len(ret) == 0 {
		panic("no return value specified for BeginTx")
	}

	var r0 pgx.Tx
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, pgx.TxOptions) (pgx.Tx, error)); ok {
		return rf(ctx, txOptions)
	}
	if rf, ok := ret.Get(0).(func(context.Context, pgx.TxOptions) pgx.Tx); ok {
		r0 = rf(ctx, txOptions)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pgx.Tx)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, pgx.TxOptions) error); ok {
		r1 = rf(ctx, txOptions)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInputConn_BeginTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BeginTx'
type MockInputConn_BeginTx_Call struct {
	*mock.Call
}

// BeginTx is a helper method to define mock.On call
//   - ctx context.Context
//   - txOptions pgx.TxOptions
func (_e *MockInputConn_Expecter) BeginTx(ctx interface{}, txOptions interface{}) *MockInputConn_BeginTx_Call {
	return &MockInputConn_BeginTx_Call{Call: _e.mock.On("BeginTx", ctx, txOptions)}
}

func (_c *MockInputConn_BeginTx_Call) Run(run func(ctx context.Context, txOptions pgx.TxOptions)) *MockInputConn_BeginTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(pgx.TxOptions))
	})
	return _c
}

func (_c *MockInputConn_BeginTx_Call) Return(_a0 pgx.Tx, _a1 error) *MockInputConn_BeginTx_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInputConn_BeginTx_Call) RunAndReturn(run func(context.Context, pgx.TxOptions) (pgx.Tx, error)) *MockInputConn_BeginTx_Call {
	_c.Call.Return(run)
	return _c
}

// Exec provides a mock function with given fields: ctx, sql, args
func (_m *MockInputConn) Exec(ctx context.Context, sql string, args ...interface{}) (pgconn.CommandTag, error) {
	var _ca []interface{}
	_ca = append(_ca, ctx, sql)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Exec")
	}

	var r0 pgconn.CommandTag
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) (pgconn.CommandTag, error)); ok {
		return rf(ctx, sql, args...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) pgconn.CommandTag); ok {
		r0 = rf(ctx, sql, args...)
	} else {
		r0 = ret.Get(0).(pgconn.CommandTag)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...interface{}) error); ok {
		r1 = rf(ctx, sql, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInputConn_Exec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exec'
type MockInputConn_Exec_Call struct {
	*mock.Call
}

// Exec is a helper method to define mock.On call
//   - ctx context.Context
//   - sql string
//   - args ...interface{}
func (_e *MockInputConn_Expecter) Exec(ctx interface{}, sql interface{}, args ...interface{}) *MockInputConn_Exec_Call {
	return &MockInputConn_Exec_Call{Call: _e.mock.On("Exec",
		append([]interface{}{ctx, sql}, args...)...)}
}

func (_c *MockInputConn_Exec_Call) Run(run func(ctx context.Context, sql string, args ...interface{})) *MockInputConn_Exec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockInputConn_Exec_Call) Return(_a0 pgconn.CommandTag, _a1 error) *MockInputConn_Exec_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInputConn_Exec_Call) RunAndReturn(run func(context.Context, string, ...interface{}) (pgconn.CommandTag, error)) *MockInputConn_Exec_Call {
	_c.Call.Return(run)
	return _c
}

// Ping provides a mock function with given fields: ctx
func (_m *MockInputConn) Ping(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockInputConn_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type MockInputConn_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockInputConn_Expecter) Ping(ctx interface{}) *MockInputConn_Ping_Call {
	return &MockInputConn_Ping_Call{Call: _e.mock.On("Ping", ctx)}
}

func (_c *MockInputConn_Ping_Call) Run(run func(ctx context.Context)) *MockInputConn_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockInputConn_Ping_Call) Return(_a0 error) *MockInputConn_Ping_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInputConn_Ping_Call) RunAndReturn(run func(context.Context) error) *MockInputConn_Ping_Call {
	_c.Call.Return(run)
	return _c
}

// Query provides a mock function with given fields: ctx, sql, args
func (_m *MockInputConn) Query(ctx context.Context, sql string, args ...interface{}) (pgx.Rows, error) {
	var _ca []interface{}
	_ca = append(_ca, ctx, sql)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 pgx.Rows
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) (pgx.Rows, error)); ok {
		return rf(ctx, sql, args...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) pgx.Rows); ok {
		r0 = rf(ctx, sql, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pgx.Rows)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...interface{}) error); ok {
		r1 = rf(ctx, sql, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInputConn_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type MockInputConn_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
//   - ctx context.Context
//   - sql string
//   - args ...interface{}
func (_e *MockInputConn_Expecter) Query(ctx interface{}, sql interface{}, args ...interface{}) *MockInputConn_Query_Call {
	return &MockInputConn_Query_Call{Call: _e.mock.On("Query",
		append([]interface{}{ctx, sql}, args...)...)}
}

func (_c *MockInputConn_Query_Call) Run(run func(ctx context.Context, sql string, args ...interface{})) *MockInputConn_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockInputConn_Query_Call) Return(_a0 pgx.Rows, _a1 error) *MockInputConn_Query_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInputConn_Query_Call) RunAndReturn(run func(context.Context, string, ...interface{}) (pgx.Rows, error)) *MockInputConn_Query_Call {
	_c.Call.Return(run)
	return _c
}

// QueryRow provides a mock function with given fields: ctx, sql, args
func (_m *MockInputConn) QueryRow(ctx context.Context, sql string, args ...interface{}) pgx.Row {
	var _ca []interface{}
	_ca = append(_ca, ctx, sql)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for QueryRow")
	}

	var r0 pgx.Row
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) pgx.Row); ok {
		r0 = rf(ctx, sql, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pgx.Row)
		}
	}

	return r0
}

// MockInputConn_QueryRow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryRow'
type MockInputConn_QueryRow_Call struct {
	*mock.Call
}

// QueryRow is a helper method to define mock.On call
//   - ctx context.Context
//   - sql string
//   - args ...interface{}
func (_e *MockInputConn_Expecter) QueryRow(ctx interface{}, sql interface{}, args ...interface{}) *MockInputConn_QueryRow_Call {
	return &MockInputConn_QueryRow_Call{Call: _e.mock.On("QueryRow",
		append([]interface{}{ctx, sql}, args...)...)}
}

func (_c *MockInputConn_QueryRow_Call) Run(run func(ctx context.Context, sql string, args ...interface{})) *MockInputConn_QueryRow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockInputConn_QueryRow_Call) Return(_a0 pgx.Row) *MockInputConn_QueryRow_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInputConn_QueryRow_Call) RunAndReturn(run func(context.Context, string, ...interface{}) pgx.Row) *MockInputConn_QueryRow_Call {
	_c.Call.Return(run)
	return _c
}

// SendBatch provides a mock function with given fields: ctx, b
func (_m *MockInputConn) SendBatch(ctx context.Context, b *pgx.Batch) pgx.BatchResults {
	ret := _m.Called(ctx, b)

	if len(ret) == 0 {
		panic("no return value specified for SendBatch")
	}

	var r0 pgx.BatchResults
	if rf, ok := ret.Get(0).(func(context.Context, *pgx.Batch) pgx.BatchResults); ok {
		r0 = rf(ctx, b)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pgx.BatchResults)
		}
	}

	return r0
}

// MockInputConn_SendBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendBatch'
type MockInputConn_SendBatch_Call struct {
	*mock.Call
}

// SendBatch is a helper method to define mock.On call
//   - ctx context.Context
//   - b *pgx.Batch
func (_e *MockInputConn_Expecter) SendBatch(ctx interface{}, b interface{}) *MockInputConn_SendBatch_Call {
	return &MockInputConn_SendBatch_Call{Call: _e.mock.On("SendBatch", ctx, b)}
}

func (_c *MockInputConn_SendBatch_Call) Run(run func(ctx context.Context, b *pgx.Batch)) *MockInputConn_SendBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*pgx.Batch))
	})
	return _c
}

func (_c *MockInputConn_SendBatch_Call) Return(br pgx.BatchResults) *MockInputConn_SendBatch_Call {
	_c.Call.Return(br)
	return _c
}

func (_c *MockInputConn_SendBatch_Call) RunAndReturn(run func(context.Context, *pgx.Batch) pgx.BatchResults) *MockInputConn_SendBatch_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockInputConn creates a new instance of MockInputConn. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockInputConn(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockInputConn {
	mock := &MockInputConn{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
