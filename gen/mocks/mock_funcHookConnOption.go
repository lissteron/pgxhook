// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	pgxhook "github.com/lissteron/pgxhook"
	mock "github.com/stretchr/testify/mock"
)

// MockfuncHookConnOption is an autogenerated mock type for the funcHookConnOption type
type MockfuncHookConnOption struct {
	mock.Mock
}

type MockfuncHookConnOption_Expecter struct {
	mock *mock.Mock
}

func (_m *MockfuncHookConnOption) EXPECT() *MockfuncHookConnOption_Expecter {
	return &MockfuncHookConnOption_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: s
func (_m *MockfuncHookConnOption) Execute(s *pgxhook.HookConn) {
	_m.Called(s)
}

// MockfuncHookConnOption_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockfuncHookConnOption_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - s *pgxhook.HookConn
func (_e *MockfuncHookConnOption_Expecter) Execute(s interface{}) *MockfuncHookConnOption_Execute_Call {
	return &MockfuncHookConnOption_Execute_Call{Call: _e.mock.On("Execute", s)}
}

func (_c *MockfuncHookConnOption_Execute_Call) Run(run func(s *pgxhook.HookConn)) *MockfuncHookConnOption_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*pgxhook.HookConn))
	})
	return _c
}

func (_c *MockfuncHookConnOption_Execute_Call) Return() *MockfuncHookConnOption_Execute_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockfuncHookConnOption_Execute_Call) RunAndReturn(run func(*pgxhook.HookConn)) *MockfuncHookConnOption_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockfuncHookConnOption creates a new instance of MockfuncHookConnOption. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockfuncHookConnOption(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockfuncHookConnOption {
	mock := &MockfuncHookConnOption{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
